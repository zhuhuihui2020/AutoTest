package leetcode;
//颠倒二进制位
/**
 * 与&：0&0=0 0&1=0 1&0=0 1&1=1
 *
 * 或|：0|0=0 0|1=1 1|0=1 1|1=1
 *
 * 异或^：0^0=0 0^1=1 1^0=1 1^1=0
 *
 * 取反~：~1=0 ~0=1
 *
 * 左移<<：左边的二进制位丢弃，右边补0
 *
 * 右移>>：正数左补0，负数左补1，右边丢弃
 *
 * 无符号左移<<<：左边的二进制位丢弃，右边补0
 *
 * 无符号右移>>>：忽略符号位，空位都以0补齐
 */
public class Code190_2 {
    public static int reverseBits(int n) {
        int ans=0;
        for(int i=0;i<32;i++){
            //n&1是取出了n的最后一位，然后左移31-i，相当于翻转到应到的位置
            ans|=(n&1)<<(31-i);
            //n符号右移一位，相当于把下一个需要翻转的数，挪到了最后一位，方便下次n&1可以取出来
            n>>=1;
        }
        return ans;
    }
}
